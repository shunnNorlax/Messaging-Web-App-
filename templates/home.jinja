<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black;
        height: 400px;
        width: 400px;
        overflow: auto;
        padding: 2px;
        float: left; 
    }

    #friList_box {
        border: 1px solid black;
        height: 400px;
        width: 400px;
        overflow: auto;
        padding: 2px;
        float: left; 
        margin-left: 10px; 
    }
    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">

    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ session["username"] }} </li>
        <p><a href={{ url_for('logout') }}> Logout</a></p>
    </ol>
</nav>

<h1>Messaging App </h1>

<main> 
   <!-- User list box -->
   
    {# friend list box  #}
    <ul id="friList_box">
        {% include 'friList_box.jinja' %}
    </ul>

    <!-- The messages are displayed here -->
    <div id="message_box">
    
    </div>



    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <div id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </div>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <div id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </div>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>


    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    
    let receiver;
    let username = "{{ session["username"] }}";


    Cookies.set('username', username);
    //Cookies.set('username', receiver);


    // initializes the socket
    const socket = io();
    var public_key;
    var private_key;
    var shared_key;
    


    // generater key
    // link for RSA encryption with JSEN lib https://www.npmjs.com/package/jsencrypt
    function generateRSAkeyPair() {
        var encrypt = new JSEncrypt({ default_key_size: 2048 });//1024 -- less strong
        encrypt.getKey();
        return {
            publicKey: encrypt.getPublicKey(),
            privateKey: encrypt.getPrivateKey()
        };
    }
        // generate thekey
        const keyPair = generateRSAkeyPair();
        public_key = keyPair.publicKey;
        private_key = keyPair.privateKey;
        //console.log('Public key:',public_key);
        //console.log('Private key:',private_key);
    
    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // send_msg only on recieved side
    socket.on("send_msg", function(msg, color="black") {

        var decrypt = new JSEncrypt();
        decrypt.setPrivateKey(private_key);
        var plaintext = decrypt.decrypt(msg);
        //console.log(plaintext);
        // encrypt and store to database (not shown in this code)

        add_message(plaintext, color);
    });


    // share key
    socket.on('share_key', function(key) {
        shared_key = key;
        console.log('Shared key:', key);
        //to check in the console that when click the pubic key is shared or not
    });
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();// let within the { } scope
        console.log(receiver);

        //encryption
        var encrypt = new JSEncrypt();
        encrypt.setPublicKey(shared_key);
        ciphertext = encrypt.encrypt(message);
        console.log(ciphertext);

        $("#message").val("");
        socket.emit("send", username,receiver, public_key,ciphertext, room_id); 
        // display msg in sender side 
        add_message(username + ": " + message, "black");
    } 

    // we emit a join room event to the server to join a room
    function join_room() {
       
        receiver = $("#receiver").val();



        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, public_key, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);
            
            //get chat history


            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    //////////////////////////chat room ////////////////////////
    function chat_fri(recv) {
        console.log(room_id);
        console.log(private_key);
        receiver = recv;
        
        socket.emit("join", username, recv, public_key, (res) => {

            if (typeof res != "number") {
                alert(res);
                return;
            }
            room_id = res;
            Cookies.set("room_id", room_id);


            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    /////////////////////////////////////////friend_list//////////////////////////
    //add_fri




    
</script>
{% endblock %}
